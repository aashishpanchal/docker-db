services:
  # PostgreSQL - Relational Database
  postgres:
    image: postgres
    restart: unless-stopped
    container_name: postgres_db
    environment:
      POSTGRES_DB: postgres_db
      POSTGRES_USER: root
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    networks:
      - docker-db
  # MySQL - Relational Database
  mysql:
    image: mysql
    restart: always
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=pass
    ports:
      - "3306:3306"
    volumes:
      - ./data/mysql:/var/lib/mysql
    networks:
      - docker-db
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
  # Redis Commander - Redis GUI
  redis:
    image: redis
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 256M
    networks:
      - docker-db
  # MongoDB - Document Database
  mongo:
    image: mongo
    restart: always
    container_name: mongo
    ports:
      - "27017:27017" # make sure we don't have another mongo container running on same port
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=pass
    volumes:
      - ./data/mongo:/data/db
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    networks:
      - docker-db
  # Adminer - Manage database
  adminer:
    image: adminer
    restart: always
    container_name: adminer
    ports:
      - "8080:8080" # make sure you don't have another container running on 8080
    environment:
      - ADMINER_DEFAULT_SERVER=mysql # Change to mysql to connect to MySQL
      - ADMINER_DESIGN=pma-dark
      - ADMINER_USER=admin
      - ADMINER_PASSWORD=root
    networks:
      - docker-db

networks:
  docker-db:
